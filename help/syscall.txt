
 syscall.txt

 SKYLAND System Calls

 While the lisp API functions
 generally allow programmers
 to affect game state, some
 lower-level engine
 functionality does not
 exist in the regular lisp
 API.

 We could have added these
 functions to the lisp
 environment, but we don't
 want to waste symbol table
 space for these low-level
 infrequently used functions.


o----------------------------o

 (syscall "log" val)

 Write a value to the
 system log.


o----------------------------o

 (syscall "setvar" string int)

 Configure a SKYLAND engine
 variable.


o----------------------------o

 (syscall "getvar" string)

 Retrieve a SKYLAND engine
 variable.


o----------------------------o

 (syscall
  "challenge-complete"
  integer)

 Label challenge as
 completed.


o----------------------------o

 (syscall "fatal" value)

 Terminate the game, and
 display fatal error message
 containing value.


o----------------------------o

 (syscall "startup-time")

 If the system has a realtime
 clock, returns:

 '(yy mm dd hh mm ss)

 Otherwise, returns nil


o----------------------------o

 (syscall "set-tile"
  layer x y tile)

 Undocumented.


o----------------------------o

 (syscall "print" string x y)

 Print string at (x, y) in
 the overlay layer.


o----------------------------o

 (syscall "clear")

 Begin a rendering pass.


o----------------------------o

 (syscall "display")

 End rendering pass.


o----------------------------o

 (syscall "pools-annotate")

 Dump info about memory pools
 over uart.


o----------------------------o

 (syscall "sbr-annotate")

 Dump info about scratch
 buffer usage over uart.


o----------------------------o

 (syscall "hibernate")

 Put the system to sleep,
 until the player presses
 L+R+SELECT.


o----------------------------o

 (syscall "fade" amount)

 Fade screen to black by
 integer amount 0->100.


o----------------------------o

