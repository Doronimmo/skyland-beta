
  '(SKYLAND LISP)

 You may be wondering, why
 lisp? I never intended to
 write a lisp interpreter.
 
 I started out with a simple
 cheat system, where I could
 enter numeric codes to test
 certain behavior. But I
 couldn't remember any of the
 numeric codes, so I wrote a
 little command-prompt.
 
 Then often found myself
 wanting to write compound
 expressions, and lisp
 was the easiest thing to
 write a parser for. Over
 the years, the interpreter
 snowballed into a lexically-
 scoped scheme-inspired lisp
 with an optimizing bytecode
 compiler...


 Generally, you should refer
 to the existing game scripts
 for examples of how to use
 the engine's scripting
 language.

 SKYLAND lisp is a bit of a
 mix of scheme and common
 lisp.

 I won't give an in-depth
 description of the entire
 language. But I should
 mention a few notable
 differences from other lisp
 dialects. In almost all
 cases, the seemingly weird
 language design choices
 listed below result from
 gba hardware limitations.

 1) The language uses
 positional arguments for
 functions (e.g. $0 $1 $2...)
 I do this to reduce
 stress on the string intern
 table. The defn macros allow
 you to specify a required
 argument count. While
 positional arguments are
 less readable than named
 arguments, most lisp
 functions should be small
 anyway...

 Furthermore, the fn macro
 allows you to declare
 functions with named
 arguments.


 2) The reader (read) performs
 macro expansion. With very
 limited cpu, macroexpanding
 a function each time you call
 it just isn't realistic.
