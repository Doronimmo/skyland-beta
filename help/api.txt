
 api.txt

 Describes all available
 SKYLAND API calls.


o----------------------------o

 (achieve integer)

 Unlock achievement.


o----------------------------o

 (cargo island x y)

 Returns a string describing
 the contents of cargo-bay
 room at (x, y). Returns nil
 if the cargo-bay does not
 contain cargo. Raises a
 fatal error if the room at
 (x, y) is not a cargo bay.


o----------------------------o

 (cargo-set island x y value)

 Store string value in
 cargo-bay on island at
 (x, y). Maximum nineteen
 characters.


o----------------------------o

 (choice n)

 Returns a random number
 between 0 and n.


o----------------------------o

 (chr-new
   island
   x
   y
   mode-sym
   is-replicant)

 Add character to island at
 (x, y).


o----------------------------o

 (chr-hp island x y hp)

 Set health of character at
 (x, y).


o----------------------------o

 (chr-move
   island
   x
   y
   dest-x
   dest-y)

 Move character from (x, y)
 to (dest-x, dest-y).


o----------------------------o

 (chr-rem island x y)

 Remove character from
 from slot (x, y).


o----------------------------o

 (chrs island)

 Returns a list describing
 all of the inhabitants of
 an island.


o----------------------------o

 (chr-slots island)

 Returns a list of coords
 into which a character can
 be inserted.


o----------------------------o

 (coins)

 Return the player's coin
 count.


o----------------------------o

 (coins-add integer)

 Add integer coins to the
 player's coint count.


o----------------------------o

 (configure-rooms config)

 See
 /scripts/config/rooms.lisp
 for usage.


o----------------------------o

 (dialog strings ...)

 Composes a dialog message
 from the list of input
 strings. The game will
 open a dialog box with the
 message next time it
 reaches a state where it
 can display dialog.


o----------------------------o

 (dialog-await-y/n)

 Tells the dialog system
 to open a y/n message box
 after playing the dialog.
 Depending on the player's
 selection, the engine will
 either invoke the function
 bound to
 on-dialog-accepted
 or to
 on-dialog-declined.


 NOTE: if you call
 dialog-await-y/n, the
 on-dialog-closed hook will
 not be called when closing
 the current dialog.
 Otherwise, it wouldn't be
 possible to create a new
 and distinct dialog from an
 on-dialog-accepted hook!


o----------------------------o

 (dialog-decor name icon)

 Add a name label and an icon
 to the dialog box. The name
 should not exceed twelve
 characters.

 The icon integer represents
 a character image to draw
 from the builtin dialog
 tileset.
 0: old man
 1: goblin
 2: goblin king
 3: storm king
 ... etc.


o----------------------------o

 (emit
  symbol-or-list
  island
  x1
  y1
  x2
  y2)

 Emit a projectile defined by
 symbol, from room at (x1,y1)
 on island, with target
 (x2,y2) on opposite island.

 Symbol may be:
 'cannonball
 'flak
 'arcbolt
 'decimator-burst
 'nemesis-blast
 'missile
 'ion-burst

 Instead of a symbol, you may
 specify a custom projectile
 via a description list,
 consisting of integers:
 '(sprite-tile
   damage
   sprite-horizontal-flip)

 For sprite-tile, see
 (register-sprite).


o----------------------------o

 (eval-file path)

 Evaluate code in another
 script, given by path.


o----------------------------o

 (exit)

 Exit the current level.


o----------------------------o

 (island-configure
    island
    room-desc-list)

 Configure rooms for and
 island.


o----------------------------o

 (key-bind str function)

 While the game does not
 allow you to remap all of
 the buttons, SKYLAND
 allows you to press the
 start button and enter
 sequences of keys. To create
 a custom binding, specify
 a key sequence in str,
 along with a lisp function
 to call.

 Key character codes:
 u: dpad-up
 d: dpad-down
 l: dpad-left
 r: dpad-right
 a: A
 b: B

 So:

 (key-bind "uulb" repl)

 Would launch a lisp repl
 after the user pressed
 up-up-left-B.


o----------------------------o

 (key-reset)

 Clear all existing bindings
 created by key-bind.


o----------------------------o

 (on-fadein)
 (on-converge)
 (on-dialog-accepted)
 (on-dialog-declined)
 (on-dialog-closed)
 (on-hostile-transition)
 (on-room-destroyed)

 A set of event functions,
 called by the engine for
 various scenarios. You may
 override any of these
 functions with custom
 behavior.

 NOTE: on-room-destroyed is
 somewhat costly to register
 a callback for. But better
 to provide it than not at
 all.


o----------------------------o

 (opponent) -> island

 Returns a reference to the
 opponent's island. NOTE:
 make sure that you've
 called opponent-init before
 trying to access the
 opponent.


o----------------------------o

 (opponent-init
    terrain-size
    mode-sym)

 Create an island for the
 opponent, with
 terrain-size. See
 opponent-mode for
 description of mode-sym.


o----------------------------o

 (opponent-mode mode-sym)

 If mode sym is 'hostile,
 the opponent island will
 run a hostile AI algorithm,
 if the mode sym is
 'neutral, the opponent
 will not attack unless
 attacked by the player.


o----------------------------o

 (player) -> island

 Returns a reference to the
 player's island.


o----------------------------o

 (register-tile file-path)

 Allocate and map tile
 graphics from a file into
 video memory. Returns the
 index of the tile upon
 success. Upon failure,
 returns -1.

 You may register up to
 fifteen custom tiles.


o----------------------------o

 (register-sprite file-path)

 Allocate and map sprite
 graphics from a file into
 video memory. Returns the
 index of the tile upon
 success. Upon failure,
 returns -1.

 You may register up to
 fifteen custom sprites.


o----------------------------o

 (register-room config-list)

 Used for defining custom
 rooms!

 For example:


 (let ((t (register-tile "/mytile.img")))
  (register-room
   (list
    'room-name
    '(1 . 1)   ;; room size
    (list t)   ;; tile graphics
    1          ;; update freq (seconds)
    update)))  ;; update function (see below)

 The above code registers a
 room called room-name, size
 1x1, with tile image sourced
 from /mytile.img in sram.

 Creating a file with a .img
 extension in the file
 browser will launch a paint
 program.

 The tile graphics list
 should contain a list of tile
 indices, metatiled based
 on the room size (first row,
 followed by the second row,
 etc. in a flat list).

 The example code (above)
 calls the update function
 once per second.

 The engine will invoke update
 with four parameters:
 island, room-x, room-y target

 If the room is a weapon, the
 fourth parameter will contain
 '(target-x . target-y) or
 nill. Otherwise, nil.

 For example:

 (defn update
  (if $3        ;; if target passed
   (emit
    'flak       ;; projectile type
    $0          ;; island
    $1          ;; origin-room-x
    $2          ;; origin-room-y
    (car $3)    ;; target-room-x
    (cdr $3)))) ;; target-room-y

 You may register up to
 fifteen custom rooms.

o----------------------------o

 (repl)

 The game will launch a repl
 the next time that it enters
 an idle state.


o----------------------------o

 (rooms island)

 Returns a list describing
 the rooms associated with
 island.


o----------------------------o

 (room-new island desc)

 Add a room to island,
 where desc is a list of
 (room-sym room-x room-y)


o----------------------------o

 (sel)

 Returns the coordinates of
 the cursor as (island x y)


o----------------------------o

 (sel-move island x y)

 Move the cursor to island:
 x, y.


o----------------------------o

 (sel-input msg callback)

 Opens up a selection prompt
 ingame, with string msg.
 When the user presses the A
 button, the game will invoke
 function callback with
 parameters island, x, y.

 For example:

(sel-input "pick a coord:"
 (lambda
  (syscall "log"
           (string
            "user entered "
            $0
            $1
            $2))))


o----------------------------o

 (show-flag island)

 Display a flag.


o----------------------------o

 (syscall string ...)

 Invoke a skyland engine
 system call. In addition to
 the standard lisp engine
 functions provided here,
 the engine provides a large
 number of low-level
 functions via syscall.

 See syscall.txt for
 documentation.


o----------------------------o

 (terrain island size)

 Sets the terrain size of
 island to size. If called
 without the size argument,
 returns terrain size of
 island.


o----------------------------o

 (zone)

 Return the current zone.


o----------------------------o

